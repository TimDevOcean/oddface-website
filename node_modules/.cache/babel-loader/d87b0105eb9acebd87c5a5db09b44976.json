{"ast":null,"code":"/**\n * @name ranges-sort\n * @fileoverview Sort string index ranges\n * @version 5.0.13\n * @author Roy Revelt, Codsen Ltd\n * @license MIT\n * {@link https://codsen.com/os/ranges-sort/}\n */\nvar u = \"5.0.13\";\nvar m = u,\n    d = {\n  strictlyTwoElementsInRangeArrays: !1,\n  progressFn: null\n};\n\nfunction g(r, l) {\n  if (!Array.isArray(r) || !r.length) return r;\n  let n = { ...d,\n    ...l\n  },\n      s,\n      o;\n  if (n.strictlyTwoElementsInRangeArrays && !r.every((e, t) => !Array.isArray(e) || e.length !== 2 ? (s = t, o = e.length, !1) : !0)) throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${s}th range (${JSON.stringify(r[s], null, 4)}) has not two but ${o} elements!`);\n  if (!r.every((e, t) => !Array.isArray(e) || !Number.isInteger(e[0]) || e[0] < 0 || !Number.isInteger(e[1]) || e[1] < 0 ? (s = t, !1) : !0)) throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${s}th range (${JSON.stringify(r[s], null, 4)}) does not consist of only natural numbers!`);\n  let a = r.length ** 2,\n      i = 0;\n  return Array.from(r).sort((e, t) => (n.progressFn && (i += 1, n.progressFn(Math.floor(i * 100 / a))), e[0] === t[0] ? e[1] < t[1] ? -1 : e[1] > t[1] ? 1 : 0 : e[0] < t[0] ? -1 : 1));\n}\n\nexport { d as defaults, g as rSort, m as version };","map":{"version":3,"names":["u","m","d","strictlyTwoElementsInRangeArrays","progressFn","g","r","l","Array","isArray","length","n","s","o","every","e","t","TypeError","JSON","stringify","Number","isInteger","a","i","from","sort","Math","floor","defaults","rSort","version"],"sources":["/Users/TIM/Desktop/DEXTOP/CODE PROJECTS/oddface/node_modules/ranges-sort/dist/ranges-sort.esm.js"],"sourcesContent":["/**\n * @name ranges-sort\n * @fileoverview Sort string index ranges\n * @version 5.0.13\n * @author Roy Revelt, Codsen Ltd\n * @license MIT\n * {@link https://codsen.com/os/ranges-sort/}\n */\n\nvar u=\"5.0.13\";var m=u,d={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function g(r,l){if(!Array.isArray(r)||!r.length)return r;let n={...d,...l},s,o;if(n.strictlyTwoElementsInRangeArrays&&!r.every((e,t)=>!Array.isArray(e)||e.length!==2?(s=t,o=e.length,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${s}th range (${JSON.stringify(r[s],null,4)}) has not two but ${o} elements!`);if(!r.every((e,t)=>!Array.isArray(e)||!Number.isInteger(e[0])||e[0]<0||!Number.isInteger(e[1])||e[1]<0?(s=t,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${s}th range (${JSON.stringify(r[s],null,4)}) does not consist of only natural numbers!`);let a=r.length**2,i=0;return Array.from(r).sort((e,t)=>(n.progressFn&&(i+=1,n.progressFn(Math.floor(i*100/a))),e[0]===t[0]?e[1]<t[1]?-1:e[1]>t[1]?1:0:e[0]<t[0]?-1:1))}export{d as defaults,g as rSort,m as version};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAC,QAAN;AAAe,IAAIC,CAAC,GAACD,CAAN;AAAA,IAAQE,CAAC,GAAC;EAACC,gCAAgC,EAAC,CAAC,CAAnC;EAAqCC,UAAU,EAAC;AAAhD,CAAV;;AAAgE,SAASC,CAAT,CAAWC,CAAX,EAAaC,CAAb,EAAe;EAAC,IAAG,CAACC,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAD,IAAmB,CAACA,CAAC,CAACI,MAAzB,EAAgC,OAAOJ,CAAP;EAAS,IAAIK,CAAC,GAAC,EAAC,GAAGT,CAAJ;IAAM,GAAGK;EAAT,CAAN;EAAA,IAAkBK,CAAlB;EAAA,IAAoBC,CAApB;EAAsB,IAAGF,CAAC,CAACR,gCAAF,IAAoC,CAACG,CAAC,CAACQ,KAAF,CAAQ,CAACC,CAAD,EAAGC,CAAH,KAAO,CAACR,KAAK,CAACC,OAAN,CAAcM,CAAd,CAAD,IAAmBA,CAAC,CAACL,MAAF,KAAW,CAA9B,IAAiCE,CAAC,GAACI,CAAF,EAAIH,CAAC,GAACE,CAAC,CAACL,MAAR,EAAe,CAAC,CAAjD,IAAoD,CAAC,CAApE,CAAxC,EAA+G,MAAM,IAAIO,SAAJ,CAAe,+KAA8KL,CAAE,aAAYM,IAAI,CAACC,SAAL,CAAeb,CAAC,CAACM,CAAD,CAAhB,EAAoB,IAApB,EAAyB,CAAzB,CAA4B,qBAAoBC,CAAE,YAA7P,CAAN;EAAgR,IAAG,CAACP,CAAC,CAACQ,KAAF,CAAQ,CAACC,CAAD,EAAGC,CAAH,KAAO,CAACR,KAAK,CAACC,OAAN,CAAcM,CAAd,CAAD,IAAmB,CAACK,MAAM,CAACC,SAAP,CAAiBN,CAAC,CAAC,CAAD,CAAlB,CAApB,IAA4CA,CAAC,CAAC,CAAD,CAAD,GAAK,CAAjD,IAAoD,CAACK,MAAM,CAACC,SAAP,CAAiBN,CAAC,CAAC,CAAD,CAAlB,CAArD,IAA6EA,CAAC,CAAC,CAAD,CAAD,GAAK,CAAlF,IAAqFH,CAAC,GAACI,CAAF,EAAI,CAAC,CAA1F,IAA6F,CAAC,CAA7G,CAAJ,EAAoH,MAAM,IAAIC,SAAJ,CAAe,2KAA0KL,CAAE,aAAYM,IAAI,CAACC,SAAL,CAAeb,CAAC,CAACM,CAAD,CAAhB,EAAoB,IAApB,EAAyB,CAAzB,CAA4B,6CAAnO,CAAN;EAAuR,IAAIU,CAAC,GAAChB,CAAC,CAACI,MAAF,IAAU,CAAhB;EAAA,IAAkBa,CAAC,GAAC,CAApB;EAAsB,OAAOf,KAAK,CAACgB,IAAN,CAAWlB,CAAX,EAAcmB,IAAd,CAAmB,CAACV,CAAD,EAAGC,CAAH,MAAQL,CAAC,CAACP,UAAF,KAAemB,CAAC,IAAE,CAAH,EAAKZ,CAAC,CAACP,UAAF,CAAasB,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAC,GAAF,GAAMD,CAAjB,CAAb,CAApB,GAAuDP,CAAC,CAAC,CAAD,CAAD,KAAOC,CAAC,CAAC,CAAD,CAAR,GAAYD,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAC,CAAC,CAAD,CAAN,GAAU,CAAC,CAAX,GAAaD,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAC,CAAC,CAAD,CAAN,GAAU,CAAV,GAAY,CAArC,GAAuCD,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAC,CAAC,CAAD,CAAN,GAAU,CAAC,CAAX,GAAa,CAAnH,CAAnB,CAAP;AAAiJ;;AAAA,SAAOd,CAAC,IAAI0B,QAAZ,EAAqBvB,CAAC,IAAIwB,KAA1B,EAAgC5B,CAAC,IAAI6B,OAArC"},"metadata":{},"sourceType":"module"}